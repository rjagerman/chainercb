from chainer import cuda, as_variable
from chainercb.policy import Policy


class Exploit(Policy):
    def __init__(self, policy):
        """
        Repurposes a policy by only choosing the actions that the policy
        considers best. This results in greedy exploit-only behavior.

        :param policy: The underlying policy
        :type policy: chainercb.policy.Policy
        """
        super().__init__(policy=policy)

    def draw(self, x):
        return self.max(x)

    def max(self, x):
        return self.policy.max(x)

    def uniform(self, x):
        return self.policy.uniform(x)

    def nr_actions(self, x):
        return self.policy.nr_actions(x)

    def log_nr_actions(self, x):
        return self.policy.log_nr_actions(x)

    def propensity(self, x, action):
        xp = cuda.get_array_module(x)
        return as_variable(xp.ones(x.shape[0]).astype(dtype=x.dtype))

    def log_propensity(self, x, action):
        xp = cuda.get_array_module(x)
        return as_variable(xp.zeros(x.shape[0]).astype(dtype=x.dtype))
